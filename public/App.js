import {
  html,
  useState,
  useEffect,
} from "//unpkg.com/htm/preact/standalone.mjs";
import { MainView } from "./views/MainView.js";
import { SplashView } from "./views/SplashView.js";
import { useGun, useGunKeys, useGunKeyAuth } from "./utils/hooks.js";

export const App = () => {
  const [isReadyToAuth, setReadyToAuth] = useState(
    () => !!JSON.parse(localStorage.getItem("todoKeys"))
  );
  const [gun, sea] = useGun(Gun, ["http://localhost:8765/gun"]);
  const [appKeys, setAppKeys] = useGunKeys(
    sea,
    () => JSON.parse(localStorage.getItem("todoKeys")) || null
  );
  const [user, isLoggedIn] = useGunKeyAuth(gun, appKeys, isReadyToAuth);

  const initApp = async (keys) => {
    if (keys) {
      // We set up the keys here (with `setAppKeys`) to make sure that we're using
      // the right ones. This function is called by the splash view when the user
      // inputs existing keys. In that case, we wanna make sure `appKeys` contains
      // those instead of the ones that were generated by the `useGunKeys` hook.
      setAppKeys(keys);
    }
    // We tell Gun we're ready to perform the authentication, either with existing
    // keys or the ones generated by the `useGunKeys` hook.
    setReadyToAuth(true);
  };

  useEffect(() => {
    if (isLoggedIn) {
      // log the keys so we can grab them, probably should find a better way
      localStorage.setItem("todoKeys", JSON.stringify(appKeys));
      console.log(`App keys: ${JSON.stringify(appKeys)}`);
    }
  }, [isLoggedIn, appKeys]);

  let path;
  let ActiveView;
  if (isLoggedIn) {
    ActiveView = MainView;
    path = "/app";
  } else {
    ActiveView = SplashView;
    path = "/start";
  }

  history.replaceState({}, "", path);

  return html`<section>
    <${ActiveView}
      user=${user}
      SEA=${sea}
      appKeys=${appKeys}
      initApp=${initApp}
    />
  </section>`;
};
