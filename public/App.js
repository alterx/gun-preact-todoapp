import {
  html,
  useState,
  useEffect,
} from "//unpkg.com/htm/preact/standalone.mjs";
import { MainView } from "./views/MainView.js";
import { SplashView } from "./views/SplashView.js";
import { useGun, useNamespacedGun, useGunKeys } from "./utils/hooks.js";

export const App = () => {
  const [isLoggedIn, setIsLoggedIn] = useState(() => false);
  const [isReturning, setIsReturning] = useState(
    () => !!JSON.parse(localStorage.getItem("todoKeys"))
  );
  const [gun, sea] = useGun(Gun, ["http://localhost:8765/gun"]);
  const [user] = useNamespacedGun(gun);
  const [appKeys, setAppKeys] = useGunKeys(
    sea,
    () => JSON.parse(localStorage.getItem("todoKeys")) || null
  );

  const initApp = async (keys) => {
    if (user) {
      const encryptionKeys = keys || appKeys;
      user.auth(encryptionKeys);
      // I set up the keys here (with `setAppKeys`) to make sure that we're using
      // the right ones. This function is called by the splash view when the user
      // inputs existing keys. In that case, we wanna make sure `appKeys` contains
      // those instead of the ones that were generated by the hook.
      // If this function is called from this same file (see `useEffect` hook) the
      // `keys` parameter contains the same keys and it's safely ovewritten.
      setAppKeys(encryptionKeys);
      setIsLoggedIn(true);
    }
  };

  useEffect(() => {
    if (isLoggedIn && !isReturning) {
      // keys has been created, user has been logged in and was not returning
      localStorage.setItem("todoKeys", JSON.stringify(appKeys));
      setIsReturning(true);
    }
    if (appKeys && isReturning && !isLoggedIn) {
      // keys have been created and the user is not returning
      initApp(appKeys);
    }
    if (isLoggedIn && isReturning) {
      // log the keys so we can grab them, probably should find a better way
      // QR code, hash + url or something else
      console.log(`App keys: ${JSON.stringify(appKeys)}`);
    }
  }, [user, appKeys, isReturning, isLoggedIn, initApp]);

  let path;
  let ActiveView;
  if (isReturning && isLoggedIn) {
    ActiveView = MainView;
    path = "/app";
  } else {
    ActiveView = SplashView;
    path = "/start";
  }

  history.replaceState({}, "", path);

  return html`<section>
    <${ActiveView}
      user=${user}
      SEA=${sea}
      appKeys=${appKeys}
      initApp=${initApp}
    />
  </section>`;
};
